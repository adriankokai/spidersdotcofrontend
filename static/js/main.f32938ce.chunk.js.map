{"version":3,"sources":["store/utility.js","components/LinkInBio.js","store/actions/actionTypes.js","store/actions/fetchLinksInBio.js","components/Header.js","pages/LinksInBio.js","components/tutorial/Sidenav.js","components/tutorial/Content.js","store/actions/fetchTutorial.js","pages/Tutorial.js","pages/Test.js","App.js","registerServiceWorker.js","store/reducers/fetchLinksInBio.js","store/reducers/fetchTutorial.js","store/reducers/index.js","index.js"],"names":["updateObject","oldObject","updatedProperties","BACKEND_URL","LinkInBio","Fragment","className","href","this","props","link","style","styles","src","image","alt","title","Component","marginBottom","width","FETCH_LINKSINBIO_START","FETCH_LINKSINBIO_SUCCESS","FETCH_LINKSINBIO_FAIL","FETCH_TUTORIAL_START","FETCH_TUTORIAL_SUCCESS","FETCH_TUTORIAL_FAIL","fetchLinksInBio","dispatch","type","actionTypes","axios","get","then","res","linksInBio","data","catch","err","error","Header","zIndex","LinksInBio","onFetchLinksInBio","Array","isArray","map","linkInBio","connect","state","Sidenav","M","init","instance","getInstance","open","console","log","isOpen","ref","id","paddingTop","heading","tutorialPages","tutorialPage","onClick","changeContent","content","cursor","Content","ReactHtmlParser","fetchTutorial","tutorial","Tutorial","bind","match","params","onFetchTutorial","newContent","setState","tutorial_pages","Test","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialState","loading","fetchLinksInBioStart","action","fetchLinksInBioSuccess","fetchLinksInBioFail","fetchLinksInBioReducer","fetchTutorialStart","fetchTutorialSuccess","fetchTutorialFail","fetchTutorialReducer","rootReducer","combineReducers","composeEnhances","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","getState","app","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f32938ce.chunk.js","sourcesContent":["export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    }\n}\n\nexport const BACKEND_URL = 'https://spidersdotcobackend.herokuapp.com/'","import React, { Component } from 'react';\nimport { BACKEND_URL } from '../store/utility';\n\nexport class LinkInBio extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"col s12 m6 l4\">\n                    <a href={this.props.link}>\n                        <img style={styles} src={BACKEND_URL + 'main' + this.props.image} alt={this.props.title} />\n                    </a>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nconst styles = {\n   marginBottom: '2px',\n   width: '100%'\n}\n\nexport default LinkInBio\n","export const FETCH_LINKSINBIO_START = 'FETCH_LINKSINBIO_START';\nexport const FETCH_LINKSINBIO_SUCCESS = 'FETCH_LINKSINBIO_SUCCESS';\nexport const FETCH_LINKSINBIO_FAIL = 'FETCH_LINKSINBIO_FAIL';\n\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_LOGGED_IN = 'AUTH_LOGGED_IN';\nexport const AUTH_LOGGED_OUT = 'AUTH_LOGGED_OUT';\nexport const AUTH_FAIL = 'AUTH_FAIL';\n\nexport const FETCH_TUTORIAL_START = 'FETCH_TUTORIAL_START'\nexport const FETCH_TUTORIAL_SUCCESS = 'FETCH_TUTORIAL_SUCCESS'\nexport const FETCH_TUTORIAL_FAIL = 'FETCH_TUTORIAL_FAIL'","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { BACKEND_URL } from '../utility';\n\nexport const fetchLinksInBioStart = () => {\n    return {\n        type: actionTypes.FETCH_LINKSINBIO_START\n    }\n}\n\nexport const fetchLinksInBioSuccess = linksInBio => {\n    return {\n        type: actionTypes.FETCH_LINKSINBIO_SUCCESS,\n        linksInBio: linksInBio\n    }\n}\n\nexport const fetchLinksInBioFail = error => {\n    return {\n        type: actionTypes.FETCH_LINKSINBIO_FAIL,\n        error: error\n    }\n}\n\nexport const fetchLinksInBio = () => {\n    return dispatch => {\n        dispatch(fetchLinksInBioStart());\n        axios.get(BACKEND_URL + 'main/linksinbio/')\n        .then(res => {\n            dispatch(fetchLinksInBioSuccess(res.data))\n        })\n        .catch(err => {\n            dispatch(fetchLinksInBioFail(err))\n        })\n    }\n}","import React, { Component } from 'react'\n\nexport class Header extends Component {\n    render() {\n        return (\n            <div style={{zIndex: '999'}} className=\"navbar-fixed white darken-3\">\n                <nav>\n                    <div className=\"nav-wrapper white\">\n                        <a className=\"brand-logo center yellow-text text-darken-2\">spidersdotco</a>\n                    </div>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default Header\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport LinkInBio from '../components/LinkInBio';\nimport { fetchLinksInBio } from '../store/actions/fetchLinksInBio';\nimport Header from '../components/Header'\n\nexport class LinksInBio extends Component {\n    componentDidMount() {\n        this.props.onFetchLinksInBio()\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Header />\n                <div className='row'>\n                    {\n                        Array.isArray(this.props.linksInBio) ?\n\n                        this.props.linksInBio.map(linkInBio => (\n                            <LinkInBio\n                                link={linkInBio.link}\n                                image={linkInBio.image}\n                                title={linkInBio.title}\n                            />\n                        ))\n\n                        : \n\n                        null\n                    }\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        linksInBio: state.fetchLinksInBio.linksInBio\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchLinksInBio: () => dispatch(fetchLinksInBio())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LinksInBio)\n","import React, { Component } from \"react\";\nimport M from \"materialize-css\";\n\nclass Sidenav extends Component {\n  componentDidMount() {\n    const options = {\n      inDuration: 250,\n      outDuration: 200,\n      draggable: true\n    };\n    M.Sidenav.init(this.Sidenav);\n\n    let instance = M.Sidenav.getInstance(this.Sidenav);\n    instance.open();\n    console.log(instance.isOpen);\n  }\n  render() {\n    return (\n      <div>\n        <ul\n          ref={Sidenav => {\n            this.Sidenav = Sidenav;\n          }}\n          id=\"slide-out\"\n          className=\"sidenav sidenav-fixed\"\n          style={{zIndex: '998'}}\n        >\n          <div style={{paddingTop: '11vh'}} className=\"container\">\n\n            <h5 className=\"blue-text center\" >{this.props.heading}</h5>\n            {\n              Array.isArray(this.props.tutorialPages) ?\n\n              this.props.tutorialPages.map(tutorialPage => (\n                <li \n                  onClick={() => this.props.changeContent(tutorialPage.content)}\n                  style={{cursor: \"pointer\"}}\n                >\n                  {tutorialPage.heading}\n                </li>\n              ))\n\n              :\n\n              null\n            }\n          </div>\n\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Sidenav;","import React, { Component } from 'react'\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nexport class Content extends Component {\n    render() {\n        return (\n            <div className=\"offset300px\">\n                {\n                    ReactHtmlParser(this.props.content)\n                }\n            </div>\n        )\n    }\n}\n\nexport default Content\n","import * as actionTypes from './actionTypes'\nimport axios from 'axios'\nimport { BACKEND_URL } from '../utility'\n\nexport const fetchTutorialStart = () => {\n    return {\n        type: actionTypes.FETCH_TUTORIAL_START\n    }\n}\n\nexport const fetchTutorialSuccess = tutorial => {\n    return {\n        type: actionTypes.FETCH_TUTORIAL_SUCCESS,\n        tutorial: tutorial\n    }\n}\n\nexport const fetchTutorialFail = error => {\n    return {\n        type: actionTypes.FETCH_TUTORIAL_FAIL,\n        error: error\n    }\n}\n\nexport const fetchTutorial = id => {\n    return dispatch => {\n        dispatch(fetchTutorialStart());\n        axios.get(BACKEND_URL + `tutorials/tutorial/${id}`)\n        .then(res => {\n            dispatch(fetchTutorialSuccess(res.data))\n        })\n        .catch(err => {\n            dispatch(fetchTutorialFail(err))\n        })\n    }\n}","import React, { Component } from 'react'\nimport Sidenav from '../components/tutorial/Sidenav'\nimport Content from '../components/tutorial/Content'\nimport Header from '../components/Header'\nimport { connect } from 'react-redux'\nimport { fetchTutorial } from '../store/actions/fetchTutorial'\n\nexport class Tutorial extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: null\n\n        }\n\n        this.changeContent = this.changeContent.bind(this)\n    }\n\n    componentDidMount() {\n        const id = this.props.match.params.id\n        this.props.onFetchTutorial(id)\n    }\n\n    changeContent(newContent) {\n        this.setState({\n            content: newContent\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Header />\n                <Sidenav \n                    tutorialPages=\n                    {\n                        this.props.tutorial !== null ?\n                        \n                        this.props.tutorial.tutorial_pages\n\n                        :\n\n                        null\n                    } \n                    changeContent={this.changeContent}\n                    heading=\n                    {\n                        this.props.tutorial !== null ?\n                        \n                        this.props.tutorial.title\n\n                        :\n\n                        null\n                    }\n                />\n                <Content content=\n                    {\n                        this.state.content !== null ?\n                        \n                        this.state.content\n\n                        :\n                        \n                        this.props.tutorial !== null ? \n                        \n                        this.props.tutorial.tutorial_pages[0].content \n                        \n                        : \n                        \n                        null\n                    } \n                />\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tutorial: state.fetchTutorial.tutorial\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onFetchTutorial: id => dispatch(fetchTutorial(id))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tutorial)","import React, { Component } from 'react'\n\nexport class Test extends Component {\n    render() {\n        return (\n            <div>\n                \n            </div>\n        )\n    }\n}\n\nexport default Test\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport LinksInBio from './pages/LinksInBio.js';\nimport Tutorial from './pages/Tutorial';\nimport Test from './pages/Test'\nimport \"materialize-css/dist/css/materialize.min.css\";\n\nexport class App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route exact path='/linksinbio' component={LinksInBio} />\n          <Route exact path='/tutorial/:id' component={Tutorial} />\n          <Route exact path='/ts' component={Test} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    linksInBio: null,\n    error: null,\n    loading: false\n}\n \nconst fetchLinksInBioStart = (state, action) => {\n    return updateObject(state, {\n        error: null,\n        loading: true        \n    })\n}\n\nconst fetchLinksInBioSuccess = (state, action) => {\n    return updateObject(state, {\n        linksInBio: action.linksInBio,\n        error: null,\n        loading: false\n    })\n}\n\nconst fetchLinksInBioFail = (state, action) => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false\n    })\n}\n\nconst fetchLinksInBioReducer = (state=initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_LINKSINBIO_START: return fetchLinksInBioStart(state, action);\n        case actionTypes.FETCH_LINKSINBIO_SUCCESS: return fetchLinksInBioSuccess(state, action);\n        case actionTypes.FETCH_LINKSINBIO_FAIL: return fetchLinksInBioFail(state, action);\n        default:\n            return state\n    }\n}\n\nexport default fetchLinksInBioReducer;","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../utility'\n\nconst initialState = {\n    tutorial: null,\n    error: null,\n    loading: false\n}\n\nconst fetchTutorialStart = (state, action) => {\n    return updateObject(state, {\n        error: null,\n        loading: true\n    })\n}\n\nconst fetchTutorialSuccess = (state, action) => {\n    return updateObject(state, {\n        tutorial: action.tutorial,\n        error: null,\n        loading: false\n    })\n}\n\nconst fetchTutorialFail = (state, action) => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false\n    })\n}\n\nconst fetchTutorialReducer = (state=initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_TUTORIAL_START: return fetchTutorialStart(state, action);\n        case actionTypes.FETCH_TUTORIAL_SUCCESS: return fetchTutorialSuccess(state, action);\n        case actionTypes.FETCH_TUTORIAL_FAIL: return fetchTutorialFail(state, action);\n        default:\n            return state\n    }\n}\n\nexport default fetchTutorialReducer;","import { combineReducers } from 'redux';\nimport fetchLinksInBioReducer from './fetchLinksInBio';\nimport fetchTutorialReducer from './fetchTutorial';\n\nconst rootReducer = combineReducers({\n    fetchLinksInBio: fetchLinksInBioReducer,\n    fetchTutorial: fetchTutorialReducer\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './store/reducers';\n\n\nconst composeEnhances = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhances(\n  applyMiddleware(thunk)\n))\nconsole.log(store.getState())\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\nregisterServiceWorker()"],"sourceRoot":""}